name: '🔄 CI - Tests & Quality Checks'
# Copyright PageCloudv1
# SPDX-License-Identifier: Apache-2.0

on:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'feature/**'
  pull_request:
    branches:
      - 'main'
      - 'develop'
  workflow_dispatch:

# Permissões mínimas (princípio do menor privilégio)
permissions:
  contents: 'read'

jobs:
  lint:
    name: '🔍 Lint & Format Check'
    runs-on: 'ubuntu-latest'
    timeout-minutes: 10
    
    steps:
      # Step 1: Gerar token do GitHub App (xcloudapp-bot)
      - name: '🔑 Generate GitHub App Token'
        id: 'generate_token'
        uses: 'actions/create-github-app-token@v1'
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_PRIVATE_KEY }}
          owner: 'PageCloudv1'
          repositories: 'xcloud-mcp'
      
      # Step 2: Hardening de segurança do runner
      - name: '🛡️ Harden Runner'
        uses: 'step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f' # v2.10.2
        with:
          egress-policy: 'audit'
          disable-telemetry: true
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            objects.githubusercontent.com:443
            pypi.org:443
            files.pythonhosted.org:443
      
      # Step 3: Checkout do código
      - name: '📥 Checkout Repository'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # v4.2.2
        with:
          token: ${{ steps.generate_token.outputs.token }}
      
      # Step 4: Configurar Python
      - name: '🐍 Setup Python'
        uses: 'actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b' # v5.3.0
        with:
          python-version: '3.11'
          cache: 'pip'
      
      # Step 5: Instalar dependências
      - name: '📦 Install Dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
      
      # Step 6: Executar flake8
      - name: '🔍 Run Flake8'
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      # Step 7: Verificar formatação com Black
      - name: '🎨 Check Black Formatting'
        run: |
          black --check src/ tests/
      
      # Step 8: Verificar imports com isort
      - name: '📋 Check Import Sorting'
        run: |
          isort --check-only src/ tests/

  test:
    name: '🧪 Tests (Python ${{ matrix.python-version }})'
    runs-on: 'ubuntu-latest'
    timeout-minutes: 15
    needs: lint
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
    
    permissions:
      contents: 'read'
    
    steps:
      # Step 1: Gerar token do GitHub App
      - name: '🔑 Generate GitHub App Token'
        id: 'generate_token'
        uses: 'actions/create-github-app-token@v1'
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_PRIVATE_KEY }}
          owner: 'PageCloudv1'
          repositories: 'xcloud-mcp'
      
      # Step 2: Hardening de segurança
      - name: '🛡️ Harden Runner'
        uses: 'step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f' # v2.10.2
        with:
          egress-policy: 'audit'
          disable-telemetry: true
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            objects.githubusercontent.com:443
            pypi.org:443
            files.pythonhosted.org:443
      
      # Step 3: Checkout
      - name: '📥 Checkout Repository'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # v4.2.2
        with:
          token: ${{ steps.generate_token.outputs.token }}
      
      # Step 4: Configurar Python
      - name: '🐍 Setup Python ${{ matrix.python-version }}'
        uses: 'actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b' # v5.3.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      # Step 5: Instalar dependências
      - name: '📦 Install Dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
      
      # Step 6: Executar testes com coverage
      - name: '🧪 Run Tests with Coverage'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pytest tests/ -v --cov=src/xcloud_mcp --cov-report=term-missing --cov-report=xml --cov-report=html
      
      # Step 7: Upload coverage para Codecov (opcional)
      - name: '📊 Upload Coverage to Codecov'
        if: matrix.python-version == '3.11'
        uses: 'codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238' # v4.6.0
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      # Step 8: Upload coverage artifacts
      - name: '📦 Upload Coverage HTML Report'
        if: always() && matrix.python-version == '3.11'
        uses: 'actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882' # v4.5.0
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 7
      
      # Step 9: Gerar relatório de testes
      - name: '📊 Generate Test Report'
        if: always()
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Python Version:** ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY

  build:
    name: '🏗️ Build Container Image'
    runs-on: 'ubuntu-latest'
    timeout-minutes: 20
    needs: test
    
    permissions:
      contents: 'read'
    
    steps:
      # Step 1: Gerar token do GitHub App
      - name: '🔑 Generate GitHub App Token'
        id: 'generate_token'
        uses: 'actions/create-github-app-token@v1'
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_PRIVATE_KEY }}
          owner: 'PageCloudv1'
          repositories: 'xcloud-mcp'
      
      # Step 2: Hardening
      - name: '🛡️ Harden Runner'
        uses: 'step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f' # v2.10.2
        with:
          egress-policy: 'audit'
          disable-telemetry: true
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            objects.githubusercontent.com:443
            registry.access.redhat.com:443
            cdn.redhat.com:443
            pypi.org:443
            files.pythonhosted.org:443
      
      # Step 3: Checkout
      - name: '📥 Checkout Repository'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # v4.2.2
        with:
          token: ${{ steps.generate_token.outputs.token }}
      
      # Step 4: Setup Podman
      - name: '🐳 Setup Podman'
        run: |
          sudo apt-get update
          sudo apt-get -y install podman
          podman --version
      
      # Step 5: Build container image
      - name: '🏗️ Build Container Image'
        run: |
          podman build -t xcloud-mcp:${{ github.sha }} -f Containerfile .
      
      # Step 6: Test container health
      - name: '🏥 Test Container Health'
        run: |
          # Start container in background
          podman run -d --name test-container \
            -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            xcloud-mcp:${{ github.sha }} \
            sleep infinity
          
          # Give it time to start
          sleep 5
          
          # Check if container is running
          podman ps | grep test-container
          
          # Clean up
          podman stop test-container
          podman rm test-container
      
      # Step 7: Generate build report
      - name: '📊 Generate Build Report'
        if: always()
        run: |
          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Container image built successfully!" >> $GITHUB_STEP_SUMMARY

  summary:
    name: '📋 CI Summary'
    runs-on: 'ubuntu-latest'
    needs: [lint, test, build]
    if: always()
    
    steps:
      - name: '📊 Generate Summary'
        run: |
          echo "## 🎯 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** All checks completed" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Jobs Completed" >> $GITHUB_STEP_SUMMARY
          echo "- Lint & Format Check" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests (Python 3.11, 3.12)" >> $GITHUB_STEP_SUMMARY
          echo "- Container Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **All quality checks passed!**" >> $GITHUB_STEP_SUMMARY
